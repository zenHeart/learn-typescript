(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{390:function(t,s,a){"use strict";a.r(s);var n=a(42),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"原始类型-javascript-原始类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始类型-javascript-原始类型"}},[t._v("#")]),t._v(" 原始类型-JavaScript 原始类型")]),t._v(" "),a("p",[t._v("本节聚焦 TypScript 基于 JavaScript 定义的原始类型")]),t._v(" "),a("h2",{attrs:{id:"值和类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#值和类型"}},[t._v("#")]),t._v(" 值和类型")]),t._v(" "),a("p",[t._v("参考 MDN "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/value",target:"_blank",rel:"noopener noreferrer"}},[t._v("值"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/Type",target:"_blank",rel:"noopener noreferrer"}},[t._v("类型"),a("OutboundLink")],1),t._v(" 的定义:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("值")]),t._v(" 环境存储的实际数据，对于 JS 可能是原始值或对象")]),t._v(" "),a("li",[a("strong",[t._v("类型")]),t._v(" 具有特定特征的值，决定值的操作属性")])]),t._v(" "),a("p",[a("strong",[t._v("在 TypeScript 中类型是一个抽象概念,表示一系列值的集合，确定了值的操作属性,而值是会在运行时真实存在的数据")]),t._v(",理解上述概念是正确认识 TypeScript 类型系统的关键。\n你需要区分 "),a("strong",[t._v("原始值")]),t._v(" 和 "),a("strong",[t._v("原始类型")]),t._v("。\n例如变量中存储的 "),a("code",[t._v("1,NaN,Infinity")]),t._v(" 等我们称之为值。\n而符合 ECMAScript 规范的所有这些值的集合为 Number 类型，由于是 Number 类型\n所以这些值可以进行乘，除操作。注意不同语言对于值的操作性可能存在区别，这里只讨论 JavaScript。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("JavaScript 中的变量是没有类型的，只有值才有。变量可以随时持有任何类型的值。")]),t._v(" 出自 《你不知道的 JavaScript 中卷 1.3》")])]),t._v(" "),a("p",[t._v("正是由于 JavaScript 的变量没有类型，若变量由于赋值变化，导致类型变更，而任然进行原先值才具有的操作就发生了如下错误:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" doubleA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回 4")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 意外操作导致 a 变为字符串")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于字符串无法进行乘法操作")]),t._v("\ndoubleA"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回 NaN")]),t._v("\n")])])]),a("p",[a("strong",[t._v("TypeScript 类型系统的核心是限制变量值的范围及操作来避免弱类型导致的问题!")])]),t._v(" "),a("p",[t._v("在后续阅读中请注意区分 "),a("strong",[t._v("值")]),t._v(" 和 "),a("strong",[t._v("类型")]),t._v(" 的差异!")]),t._v(" "),a("h2",{attrs:{id:"原始值类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始值类型"}},[t._v("#")]),t._v(" 原始值类型")]),t._v(" "),a("p",[t._v("参考 "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/Primitive",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN 原始类型"),a("OutboundLink")],1),t._v("，目前 JS 包含如下原始类型:")]),t._v(" "),a("ul",[a("li",[t._v("null")]),t._v(" "),a("li",[t._v("undefined")]),t._v(" "),a("li",[t._v("Boolean")]),t._v(" "),a("li",[t._v("Number")]),t._v(" "),a("li",[t._v("String")]),t._v(" "),a("li",[t._v("Symbol (ES6 新增)")]),t._v(" "),a("li",[t._v("BigInt (ES2020 新增 )")])]),t._v(" "),a("p",[t._v("TypeScript 吸收了 JavaScript 的原始类型，采用小写表示上述类型。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("null")])]),t._v(" "),a("li",[a("strong",[t._v("undefined")])]),t._v(" "),a("li",[a("strong",[t._v("boolean")])]),t._v(" "),a("li",[a("strong",[t._v("number")])]),t._v(" "),a("li",[a("strong",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("symbol")])]),t._v(" "),a("li",[a("strong",[t._v("bigint")])])]),t._v(" "),a("p",[t._v("各类型的限制参见示例")]),t._v(" "),a("p",[t._v("注意 bigint 特性在 "),a("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-2.html#bigint",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript 3.2"),a("OutboundLink")],1),t._v(" 中加入，修改"),a("code",[t._v("tsconfig.json")]),t._v(" 中 "),a("a",{attrs:{href:"https://www.typescriptlang.org/v2/en/tsconfig#target",target:"_blank",rel:"noopener noreferrer"}},[t._v("target"),a("OutboundLink")],1),t._v(" 字段配置为 "),a("code",[t._v("ESNEXT")]),t._v(" 即可生效。")]),t._v(" "),a("p",[a("code",[t._v("target")]),t._v(" 决定了 TypeScript 如何编译 ts 文件。例如设置 "),a("code",[t._v('target: "ES5"')]),t._v("，则 "),a("code",[t._v(".ts")]),t._v(" 文件中的 ES6 箭头函数会被编译为功能相同的函数表达式以兼容 "),a("code",[t._v("ES5")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"特殊符号-unique-symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊符号-unique-symbol"}},[t._v("#")]),t._v(" 特殊符号 (unique symbol)")]),t._v(" "),a("p",[t._v("采用 "),a("code",[t._v("unique symbol")]),t._v(" 创建一个特殊符号类型。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// unique symbol 必须为常量,且值必须为 symbol")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" uniqueFoo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" unique "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("symbol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("详细资料参阅 "),a("a",{attrs:{href:"https://www.typescriptlang.org/v2/docs/handbook/release-notes/overview.html#unique-symbol",target:"_blank",rel:"noopener noreferrer"}},[t._v("unique symbol"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"原始封装对象类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始封装对象类型"}},[t._v("#")]),t._v(" 原始封装对象类型")]),t._v(" "),a("p",[t._v("JavaScript 的原始类型的值上也可以调用方法，这是因为基础值在 JS 引擎内部会装换为 "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/Primitive#Primitive_wrapper_objects_in_JavaScript",target:"_blank",rel:"noopener noreferrer"}},[t._v("原始封装对象"),a("OutboundLink")],1),t._v("。除去 null,undefined 其他类型均存在原始封装对象。")]),t._v(" "),a("ul",[a("li",[t._v("String")]),t._v(" "),a("li",[t._v("Number")]),t._v(" "),a("li",[t._v("BigInt")]),t._v(" "),a("li",[t._v("Boolean")]),t._v(" "),a("li",[t._v("Symbol")])]),t._v(" "),a("p",[t._v("TypeScript 采用上述符号表示原始封装对象类型。示例如下:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Boolean 类型,值可以为 boolean 类型和 Boolean 的原始封装类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bool"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Boolean "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Number 类型,值可以为 number 类型和 Number 的原始封装类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" numVal"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 十进制")]),t._v("\nnumVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转转为 16 进制")]),t._v("\nnumVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 也支持数值")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//String 类型,,值可以为 string 类型和 String 的原始封装类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" strVal"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstrVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拆分字符串为单个字符")]),t._v("\nstrVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 支持赋值为字符串")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Symbol 类型, 值可以为 symbol 类型和 Symbol 的原始封装类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" symVal"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Symbol "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意 Symbol 不能采用 new 只可采用 Object 创建原始封装类型")]),t._v("\nsymVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsym "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个全局符号")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//BigInt, 值可以为 string 类型和 BigInt 的原始封装类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bigVal"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" BigInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BigInt 也只能采用 Object 包裹的方式创建原始封装类型")]),t._v("\nbigVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbigVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 支持 bigint 类型")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("原始封装类型实际上属于对象类型，由于和原始值类型相关放在此处一起讲解。")])]),t._v(" "),a("h2",{attrs:{id:"原始值类型和原始封装对象类型的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始值类型和原始封装对象类型的区别"}},[t._v("#")]),t._v(" 原始值类型和原始封装对象类型的区别")]),t._v(" "),a("p",[t._v("除 "),a("code",[t._v("symbol,bigint")]),t._v(" 外，"),a("code",[t._v("boolean,string,number")]),t._v(" 取值不能为原始封装对象")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// boolean 类型不接受原始封装类型的值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" boolVal"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查报错")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number 类型不接受原始封装类型的值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查报错")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string 类型不接受原始封装类型的值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查报错")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// symbol 可接受原始封装类型的值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sym1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("symbol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 合法")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bigint 可接受原始封装类型的值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bigIntVal"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bigint "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 合法")]),t._v("\n")])])]),a("p",[t._v("由于在 JavaScript 我们多采用字面量形式定义原始类型，而不会使用构造器，所以请只采用小写的原始值类型限定对应变量。"),a("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/declaration-files/do-s-and-don-ts.html#number-string-boolean-symbol-and-object",target:"_blank",rel:"noopener noreferrer"}},[t._v("TS 官方文档"),a("OutboundLink")],1),t._v(" 也给出了此建议。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("TypeScript 将 JavaScript 中的原始类型细分为原始值类型和原始封装对象类型，是为了通过更精细的类型限制避免 JavaScript 弱类型的缺陷。随着后续类型系统逐渐扩充，你会有更深刻的体会。")])]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("本小节我们了解了 TypeScript 参考 JavaScript 定义的基础类型。知识点如下")]),t._v(" "),a("ol",[a("li",[t._v("理解了值和类型的区别\n"),a("ol",[a("li",[a("strong",[t._v("类型是一系列值的集合，确定了值的操作属性")]),t._v("(注意是类型限定了值的操作属性,注意主次关系)")]),t._v(" "),a("li",[a("strong",[t._v("TypeScript 类型系统的核心是限制变量值的范围及操作来避免弱类型导致的问题!")])])])]),t._v(" "),a("li",[t._v("原始值类型\n"),a("ul",[a("li",[a("strong",[t._v("null")])]),t._v(" "),a("li",[a("strong",[t._v("undefined")])]),t._v(" "),a("li",[a("strong",[t._v("boolean")])]),t._v(" "),a("li",[a("strong",[t._v("number")])]),t._v(" "),a("li",[a("strong",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("symbol")])]),t._v(" "),a("li",[a("strong",[t._v("bigint")]),t._v(" 必须配置 "),a("code",[t._v('target:"ESNEXT"')]),t._v(" 才有效")])])]),t._v(" "),a("li",[t._v("原始封装类型，"),a("strong",[t._v("注意为对象类型")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("String")])]),t._v(" "),a("li",[a("strong",[t._v("Number")])]),t._v(" "),a("li",[a("strong",[t._v("BigInt")])]),t._v(" "),a("li",[a("strong",[t._v("Boolean")])]),t._v(" "),a("li",[a("strong",[t._v("Symbol")])])])]),t._v(" "),a("li",[t._v("原始值类型不能赋值为原始封装对象，一般只采用原始值类型。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);